/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface WebAccordion {
        /**
          * close an accordion item
          * @param index
         */
        "close": (index: number) => Promise<void>;
        /**
          * Open an accordion item
          * @param index
         */
        "open": (index: number) => Promise<void>;
    }
    interface WebAccordionItem {
        /**
          * close the accordion item
         */
        "closeItem": () => Promise<void>;
        /**
          * index of accordion item from top to bottom
         */
        "index": number;
        /**
          * The mutation observer config to listen for content changes in the accordion item
         */
        "mutationObserverConfig": { childList: boolean; subtree: boolean; };
        /**
          * accordion item is open or opening (css transition)
         */
        "open": boolean;
        /**
          * open the accordion item
         */
        "openItem": () => Promise<void>;
    }
}
export interface WebAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWebAccordionItemElement;
}
declare global {
    interface HTMLWebAccordionElement extends Components.WebAccordion, HTMLStencilElement {
    }
    var HTMLWebAccordionElement: {
        prototype: HTMLWebAccordionElement;
        new (): HTMLWebAccordionElement;
    };
    interface HTMLWebAccordionItemElement extends Components.WebAccordionItem, HTMLStencilElement {
    }
    var HTMLWebAccordionItemElement: {
        prototype: HTMLWebAccordionItemElement;
        new (): HTMLWebAccordionItemElement;
    };
    interface HTMLElementTagNameMap {
        "web-accordion": HTMLWebAccordionElement;
        "web-accordion-item": HTMLWebAccordionItemElement;
    }
}
declare namespace LocalJSX {
    interface WebAccordion {
    }
    interface WebAccordionItem {
        /**
          * index of accordion item from top to bottom
         */
        "index"?: number;
        /**
          * The mutation observer config to listen for content changes in the accordion item
         */
        "mutationObserverConfig"?: { childList: boolean; subtree: boolean; };
        /**
          * triggered when the content of the accordion item changes
         */
        "onContentChanged"?: (event: WebAccordionItemCustomEvent<any>) => void;
        /**
          * triggered when the accordion item is opened
         */
        "onOpenEvent"?: (event: WebAccordionItemCustomEvent<any>) => void;
        /**
          * accordion item is open or opening (css transition)
         */
        "open"?: boolean;
    }
    interface IntrinsicElements {
        "web-accordion": WebAccordion;
        "web-accordion-item": WebAccordionItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "web-accordion": LocalJSX.WebAccordion & JSXBase.HTMLAttributes<HTMLWebAccordionElement>;
            "web-accordion-item": LocalJSX.WebAccordionItem & JSXBase.HTMLAttributes<HTMLWebAccordionItemElement>;
        }
    }
}
